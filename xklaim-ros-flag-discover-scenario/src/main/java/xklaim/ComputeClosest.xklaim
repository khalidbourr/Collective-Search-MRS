package xklaim


import java.util.HashMap
import java.util.TreeMap
import java.util.Map
import static xklaim.GlobalConstants.*

proc ComputeClosest(Locality robot) {
    // Total number of flags to discover
	val TOTAL_FLAGS = 4
    // Map to store the distance and flag information
    var Map<Double, String> distanceAndFlag = new HashMap<Double, String>();
    
	while(true){
	    // Read the robot's position
	    read(POSITION, var Double positionx, var Double positiony, var Double theta)@robot;
	    // Read all signals coming from flags
	    for (var Integer i = 1; i <= TOTAL_FLAGS; i++) {
	        // Read the flag's position
	        read(FLAG,"flag_" + i.toString(), val String flagId, val Double x_flag, val Double y_flag)@self;
	        // Compute the distance between the robot and all flags
	        var delta = Math.pow((x_flag - positionx), 2) + Math.pow((y_flag - positiony), 2);
	        var norm = Math.sqrt(delta);
	        // Store the distance in the map
	        distanceAndFlag.put(norm, flagId);
	        
	    }
	        // Choose the shortest distance
	        var sorted = new TreeMap<Double, String>(distanceAndFlag);
	        var entry = sorted.firstEntry();
	        var distance = entry.getKey();
	        var flag = entry.getValue();
	        // Send the short distance and the flag correspondence
	        out(FLAG_STATUS, flag, distance)@robot;
	        distanceAndFlag.clear();   
	 }
}
 	

	
	
	
	
	
	
	
