package xklaim

import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import java.util.concurrent.ThreadLocalRandom
import messages.Odometry
import messages.Range
import messages.Twist
import ros.Publisher
import ros.RosBridge
import java.util.List

proc Stop(String robotId, List<Locality> robots) {
    // topic for odometry
    val odomTopic = String.format("/%s/odom", robotId)
    // topic for sonar sensor
	val sonarTopic = String.format("/%s/sensor/sonar_front", robotId)
	// topic for command velocity
	val cmdVelTopic = String.format("/%s/cmd_vel", robotId)
	// read the bridge
	read("bridge", var RosBridge bridge)@self
	
	while(true){
		for (Locality robot : robots) {
			// read the "stop" variable from all the robots
        	read("stop", var Boolean s)@robot
        	// if true the robot should stop
        	if(s== true) {
	        	val pubvel = new Publisher(cmdVelTopic,"geometry_msgs/Twist", bridge)
	        	val twist = new Twist()
	        	// set linear velocity to 0
	        	twist.linear.x = 0.0
	       	 	// set angular velocity to 0
	        	twist.angular.z = 0.0 
	        	// publish the command to stop
	        	pubvel.publish(twist)
	       		print("All flags have been discovered by the network \n")
	       		// unsubscribe from odometry and sonar sensor topics
	       		bridge.unsubscribe(odomTopic)	
	       	    bridge.unsubscribe(sonarTopic)
	       	    // stop the execution
	       	    stop()		       			
       		 }		
		}

	}
}