package xklaim.robot

import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import java.util.concurrent.ThreadLocalRandom
import messages.Odometry
import messages.Range
import messages.Twist
import ros.Publisher
import ros.SubscriptionRequestMsg
import java.util.List
import messages.XklaimToRosConnection
import static xklaim.GlobalConstants.*
import static xklaim.robot.RobotConstants.*

proc RandomWalk(String robotId, List<Locality> robots) {
	val local=self
	// connect to the ROS bridge
	val bridge = new XklaimToRosConnection(ROS_BRIDGE_SOCKET_URI)
	out(BRIDGE, bridge)@self
	// to initialize
    out(POSITION, 0.0, 0.0, 0.0)@self	
    
	bridge.subscribe(
		SubscriptionRequestMsg.generate("/"+robotId+"/odom").setType(
			ODOMETRYMESSAGE).setThrottleRate(1).setQueueLength(1),
		[ data, stringRep |
			// extract the robot's position from the odometry sensor
			var mapper = new ObjectMapper();
			var JsonNode rosMsgNode = data.get("msg");
			var Odometry odom = mapper.treeToValue(rosMsgNode, Odometry);
			var double positionx = odom.pose.pose.position.x;
     	    var double positiony = odom.pose.pose.position.y;
       		var double theta = Math.atan2(positiony, positionx);
       		// Withdraw tuple to insert one with new data
       		in(POSITION, val Double anyX, val Double anyY, val Double anyT)@local
  		    out(POSITION, positionx, positiony, theta)@local
			])



 	bridge.subscribe(
		SubscriptionRequestMsg.generate("/"+robotId+"/sensor/sonar_front").setType(
			SONARMESSAGE).setThrottleRate(1).setQueueLength(1),
		[ data, stringRep |
			// take data from the robot's ultrasonic sensors.
			var mapper = new ObjectMapper();
			var JsonNode rosMsgNode = data.get("msg");
			var Range laser_data = mapper.treeToValue(rosMsgNode, Range)
			var range = laser_data.range
			var double speed
			var double angle
        	// initialize the publisher	
			val pubvel = new Publisher("/"+robotId+"/cmd_vel", CMDVELMESSAGE , bridge)
		    val twist=new Twist()
		    // The angular velocity for a random walk requires random variables that range from -1 to 1.
		    var double random = ThreadLocalRandom.current().nextDouble(-1.0, 1.0)
		    // random walk in case of obstacles
			if(range<MIN_RANGE){	
		     	speed = MAX_SPEED - (MIN_RANGE-range) / MIN_RANGE
             	angle = (1/range) * (MIN_RANGE-range) + MIN_ANGLE;
       		 }
        	// random walk in free obstacle space
        	if(range>=MIN_RANGE){	
		     	speed = MAX_SPEED - (MIN_RANGE-range) / MIN_RANGE
             	angle = random             
       		 }  		 
       		// commands the wheels
      		twist.linear.x = speed
      		twist.angular.z = angle 
      		pubvel.publish(twist)
	 		
		]
	)
	
		
	
	
	
	
}