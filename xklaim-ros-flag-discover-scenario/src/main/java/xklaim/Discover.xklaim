package xklaim



import java.util.List
import java.util.HashSet
import java.util.Set

proc Discover(String robotId, List<Locality> robots) {
	// read the total flags a robot has to discover
	read("Total_flag", val Integer TOTAL_FLAGS)@self
	
	// create a set of discovered flags
	val  Set<String> discoveredFlags = new HashSet<String>()
	
	// initial state of flags, "noFlag discovered"
	out("flag_discovered","noFlag")@self  	
	        		             		
	
	while(discoveredFlags.size() != TOTAL_FLAGS){	    
		// take the information from the simulator that contains the closest flag "its color" and the distance to it. 
    	in("distance_and_flag", var String flag, var Double distance)@self; 
        // check if the robot is within the radius of the undiscovered shortest flag
        if (distance < 8.0 && !discoveredFlags.contains(flag)) {
            // read the robot's position
            read("position",var Double x, var Double y, var Double theta)@self	 
            // format the location string
            var String location = String.format("[%.2f ± 8.0, %.2f ± 8.0]", x, y)
            // print the flag discovery message with location and robot id
            print(flag + " flag has been discovered in the area: " + location + " by " + robotId + "\n") 
            // add the flag to the discovered flags set
            discoveredFlags.add(flag)
            // read the flag_discovered variable
            in("flag_discovered", var String X)@self           	
            // send the flag discovered to all robots 
            out("flag_discovered",flag)@self           	
	        }
	     // Read the flag_discovered variable from all robots 
	      
	     /* ! This part here create a latency; I'm not sure whether it's preferable to put it in a separated process for example "Listen" */
         for (Locality robot : robots) {
        	read("flag_discovered", var String flagDiscovered)@robot
        	if (flagDiscovered != "noFlag") {
            	discoveredFlags.add(flagDiscovered)
	        }
	    }      
	}
    // activate the process Stop to all robots
    out("stop", true)@self 
    // stop the script
    stop() 		
	
	}